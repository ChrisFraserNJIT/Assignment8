name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'  # Specify exact version
        
    - uses: actions/cache@v3
      id: cache
      with:
        path: |
          venv
          ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        playwright install

    - name: Run tests
      run: |
        source venv/bin/activate
        pytest tests/unit/ --cov=src --junitxml=test-results/junit.xml
        pytest tests/integration/
        pytest tests/e2e/

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: test-results/

  build-and-push-docker:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - uses: docker/setup-buildx-action@v3
      
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            kaw393939/601_module8:latest
            kaw393939/601_module8:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=kaw393939/601_module8:cache
          cache-to: type=inline,mode=max
          
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'kaw393939/601_module8:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
